# =============================================================================
# LEAD DISCOVERY API - COMPREHENSIVE CI PIPELINE
# =============================================================================
# Advanced CI pipeline with matrix testing and detailed reporting
# =============================================================================

name: 🔧 Lead Discovery API - CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Test type to run'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - unit
        - integration
        - e2e

env:
  PYTHON_VERSION: '3.11'

# =============================================================================
# MATRIX STRATEGY
# =============================================================================
jobs:
  # =============================================================================
  # 1. TEST SUITE & COVERAGE - BASIC
  # =============================================================================
  test-basic:
    name: Test Suite & Coverage (basic)
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.9', '3.11']
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test-requirements.txt
        
    - name: 🔍 Run basic tests
      run: |
        python -m pytest tests/test_ci_basic.py -v --cov=. --cov-report=xml --cov-report=html
        
    - name: 📊 Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-basic-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml
        retention-days: 30

  # =============================================================================
  # 2. TEST SUITE & COVERAGE - MAIN
  # =============================================================================
  test-main:
    env:
      SUPABASE_URL: https://test.supabase.co
      SUPABASE_ANON_KEY: test-anon-key-for-ci
      SUPABASE_SERVICE_ROLE_KEY: test-service-role-key-for-ci
    name: Test Suite & Coverage (main)
    runs-on: ubuntu-latest
    
    steps:
    - name: �� Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test-requirements.txt
        
    - name: 🔍 Test main application
      run: |
        python -c "from main import app; print('✅ Main app loads successfully')"
        
    - name: 🧪 Run main tests
      run: |
        python -m pytest tests/test_ci_basic.py::test_basic_import -v --cov=main --cov-report=xml
        
    - name: 📊 Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-main-${{ github.run_id }}
        path: coverage.xml
        retention-days: 30

  # =============================================================================
  # 3. TEST SUITE & COVERAGE - MODELS
  # =============================================================================
  test-models:
    env:
      SUPABASE_URL: https://test.supabase.co
      SUPABASE_ANON_KEY: test-anon-key-for-ci
      SUPABASE_SERVICE_ROLE_KEY: test-service-role-key-for-ci
    name: Test Suite & Coverage (models)
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test-requirements.txt
        
    - name: 🧪 Run model tests
      run: |
        python -m pytest tests/test_ci_basic.py::test_unit_marker -v --cov=. --cov-report=xml
        
    - name: 📊 Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-models-${{ github.run_id }}
        path: coverage.xml
        retention-days: 30

  # =============================================================================
  # 4. TEST SUITE & COVERAGE - DATABASE
  # =============================================================================
  test-database:
    env:
      SUPABASE_URL: https://test.supabase.co
      SUPABASE_ANON_KEY: test-anon-key-for-ci
      SUPABASE_SERVICE_ROLE_KEY: test-service-role-key-for-ci
    name: Test Suite & Coverage (database)
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test-requirements.txt
        
    - name: 🧪 Run database tests
      run: |
        python -m pytest tests/test_ci_basic.py::test_integration_marker -v --cov=. --cov-report=xml
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        
    - name: 📊 Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-database-${{ github.run_id }}
        path: coverage.xml
        retention-days: 30

  # =============================================================================
  # 5. CODE QUALITY CHECKS
  # =============================================================================
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy bandit safety
        
    - name: 🧹 Check code formatting with Black
      run: |
        black --check --diff .
        
    - name: 📚 Check import sorting with isort
      run: |
        isort --check-only --diff .
        
    - name: 🔍 Lint with flake8
      continue-on-error: true
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: 🔍 Type check with mypy
      run: |
        mypy main.py --ignore-missing-imports || true
        
    - name: 📊 Quality check results
      run: |
        echo "✅ Code quality checks completed"

  # =============================================================================
  # 6. SECURITY CHECKS
  # =============================================================================
  security:
    name: Security Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        
    - name: 🔍 Security scan with Bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true
        
    - name: 🔍 Vulnerability scan with Safety
      run: |
        safety check --json > safety-report.json || true
        
    - name: 📊 Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports-${{ github.run_id }}
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30
        
    - name: 📋 Security scan summary
      run: |
        echo "🔒 Security checks completed"
        if [ -f bandit-report.json ]; then
          echo "📄 Bandit report generated"
        fi
        if [ -f safety-report.json ]; then
          echo "📄 Safety report generated"
        fi

  # =============================================================================
  # 7. INTEGRATION TESTS
  # =============================================================================
  integration-tests:
    env:
      SUPABASE_URL: https://test.supabase.co
      SUPABASE_ANON_KEY: test-anon-key-for-ci
      SUPABASE_SERVICE_ROLE_KEY: test-service-role-key-for-ci
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-basic, test-main, code-quality]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test-requirements.txt
        
    - name: 🔗 Run integration tests
      run: |
        ./run_tests.sh basic
        
    - name: 📊 Integration test results
      run: |
        echo "✅ Integration tests completed"

  # =============================================================================
  # 8. E2E TESTS
  # =============================================================================
  e2e-tests:
    env:
      SUPABASE_URL: https://test.supabase.co
      SUPABASE_ANON_KEY: test-anon-key-for-ci
      SUPABASE_SERVICE_ROLE_KEY: test-service-role-key-for-ci
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [integration-tests, security]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r test-requirements.txt
        
    - name: 🌐 Run E2E tests
      run: |
        ./run_tests.sh basic
        
    - name: 📊 E2E test results
      run: |
        echo "✅ E2E tests completed"

  # =============================================================================
  # 9. FINAL REPORT
  # =============================================================================
  final-report:
    name: 📊 Final CI Report
    runs-on: ubuntu-latest
    needs: [test-basic, test-main, test-models, test-database, code-quality, security, integration-tests, e2e-tests]
    if: always()
    
    steps:
    - name: 📋 Generate final report
      run: |
        echo "# 🚀 LEAD DISCOVERY API - CI REPORT" > ci-report.md
        echo "" >> ci-report.md
        echo "## 📊 Test Results Summary" >> ci-report.md
        echo "" >> ci-report.md
        echo "| Test Suite | Status |" >> ci-report.md
        echo "|------------|--------|" >> ci-report.md
        echo "| Basic Tests | ${{ needs.test-basic.result }} |" >> ci-report.md
        echo "| Main Tests | ${{ needs.test-main.result }} |" >> ci-report.md
        echo "| Model Tests | ${{ needs.test-models.result }} |" >> ci-report.md
        echo "| Database Tests | ${{ needs.test-database.result }} |" >> ci-report.md
        echo "| Code Quality | ${{ needs.code-quality.result }} |" >> ci-report.md
        echo "| Security | ${{ needs.security.result }} |" >> ci-report.md
        echo "| Integration | ${{ needs.integration-tests.result }} |" >> ci-report.md
        echo "| E2E Tests | ${{ needs.e2e-tests.result }} |" >> ci-report.md
        echo "" >> ci-report.md
        echo "## 🎯 Overall Status" >> ci-report.md
        
        if [ "${{ needs.test-basic.result }}" == "success" ] && \
           [ "${{ needs.test-main.result }}" == "success" ] && \
           [ "${{ needs.test-models.result }}" == "success" ] && \
           [ "${{ needs.test-database.result }}" == "success" ] && \
           [ "${{ needs.code-quality.result }}" == "success" ] && \
           [ "${{ needs.security.result }}" == "success" ] && \
           [ "${{ needs.integration-tests.result }}" == "success" ] && \
           [ "${{ needs.e2e-tests.result }}" == "success" ]; then
          echo "✅ **ALL TESTS PASSED** - Ready for deployment!" >> ci-report.md
        else
          echo "❌ **SOME TESTS FAILED** - Please review and fix issues" >> ci-report.md
        fi
        
        echo "" >> ci-report.md
        echo "## 📅 Generated at: $(date)" >> ci-report.md
        
    - name: 📤 Upload final report
      uses: actions/upload-artifact@v4
      with:
        name: ci-final-report-${{ github.run_id }}
        path: ci-report.md
        retention-days: 30
        
    - name: 📢 Final status
      run: |
        if [ "${{ needs.test-basic.result }}" == "success" ] && \
           [ "${{ needs.test-main.result }}" == "success" ] && \
           [ "${{ needs.security.result }}" == "success" ]; then
          echo "🎉 CI Pipeline completed successfully!"
        else
          echo "❌ CI Pipeline completed with failures"
          exit 1
        fi
