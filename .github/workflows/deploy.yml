name: 🚀 Lead Discovery API - CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deploy to environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  PYTHON_VERSION: '3.11'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: lead-discovery-api

jobs:
  # =============================================================================
  # 1. CODE QUALITY & TESTING
  # =============================================================================
  quality:
    name: 🔍 Code Quality & Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black isort
        
    - name: 🧹 Code formatting check
      run: |
        black --check --diff .
        isort --check-only --diff .
        
    - name: 🔍 Linting
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: 🧪 Run tests
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html
        coverage report
        
    - name: 📊 Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # =============================================================================
  # 2. SECURITY SCANNING
  # =============================================================================
  security:
    name: 🔒 Security Scanning
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install security tools
      run: |
        pip install bandit safety
        
    - name: 🔍 Security scan with Bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true
        
    - name: 🔍 Vulnerability scan with Safety
      run: |
        safety check --json > safety-report.json || true
        
    - name: 📊 Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # =============================================================================
  # 3. BUILD & PACKAGE
  # =============================================================================
  build:
    name: 🔨 Build & Package
    runs-on: ubuntu-latest
    needs: [quality, security]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🔨 Run build script
      run: |
        chmod +x build_staging.sh
        ./build_staging.sh
        
    - name: 📦 Create build artifacts
      run: |
        mkdir -p build-artifacts
        cp -r build/staging/* build-artifacts/
        tar -czf build-artifacts.tar.gz build-artifacts/
        
    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: build-artifacts.tar.gz

  # =============================================================================
  # 4. DOCKER BUILD
  # =============================================================================
  docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔐 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🐳 Build Docker image
      run: |
        docker build -t ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .
        docker build -t ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest .
        
    - name: 🚀 Push Docker image
      run: |
        docker push ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker push ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest

  # =============================================================================
  # 5. STAGING DEPLOYMENT
  # =============================================================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment: staging
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        
    - name: 🔐 Render.com deployment
      run: |
        echo "🚀 Deploying to Render.com staging..."
        # Render.com auto-deploys on git push
        # This step can be extended with custom deployment logic
        
    - name: 🏥 Health check
      run: |
        echo "🏥 Waiting for staging deployment..."
        sleep 30
        # Add actual health check logic here
        
    - name: 📊 Deployment status
      run: |
        echo "✅ Staging deployment completed successfully!"

  # =============================================================================
  # 6. PRODUCTION DEPLOYMENT
  # =============================================================================
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        
    - name: 🔐 Render.com production deployment
      run: |
        echo "🚀 Deploying to Render.com production..."
        # Render.com auto-deploys on git push to main
        
    - name: 🏥 Production health check
      run: |
        echo "🏥 Waiting for production deployment..."
        sleep 60
        # Add production health check logic
        
    - name: 📊 Production deployment status
      run: |
        echo "✅ Production deployment completed successfully!"
        
    - name: 🔔 Notify deployment
      run: |
        echo "🔔 Production deployment notification sent!"
        # Add notification logic (Slack, email, etc.)

  # =============================================================================
  # 7. POST-DEPLOYMENT
  # =============================================================================
  post-deployment:
    name: 📊 Post-Deployment
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: 📊 Deployment summary
      run: |
        echo "📊 Deployment Summary:"
        echo "- Staging: ${{ needs.deploy-staging.result }}"
        echo "- Production: ${{ needs.deploy-production.result }}"
        
    - name: 🔄 Cleanup
      run: |
        echo "🧹 Cleaning up temporary files..."
        # Add cleanup logic
        
    - name: 📈 Performance monitoring
      run: |
        echo "📈 Setting up performance monitoring..."
        # Add monitoring setup logic 