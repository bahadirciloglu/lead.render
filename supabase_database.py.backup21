"""
Supabase Database Manager
Lead Discovery API i√ßin Supabase veritabanƒ± y√∂netimi
"""

import json
import os
from datetime import datetime
from typing import Any, Dict, List, Optional

from supabase_config import supabase_config


class SupabaseDatabaseManager:
    """Supabase veritabanƒ± y√∂neticisi"""

    def __init__(self):
        self.client = supabase_config.get_client()
        self.admin_client = supabase_config.get_admin_client()
        self.init_database()

    def init_database(self):
        """Veritabanƒ± tablolarƒ±nƒ± kontrol et ve gerekirse olu≈ütur"""
        # Supabase'de tablolar otomatik olarak olu≈üturulur
        # Bu metod sadece tablo yapƒ±sƒ±nƒ± kontrol eder
        print("üîç Supabase tablolarƒ± kontrol ediliyor...")

        # Test sorgusu ile tablolarƒ±n varlƒ±ƒüƒ±nƒ± kontrol et
        try:
            # Users tablosu kontrol√º
            result = self.client.table("users").select("id").limit(1).execute()
            print("‚úÖ Users tablosu mevcut")
        except Exception as e:
            print(f"‚ö†Ô∏è  Users tablosu bulunamadƒ±: {e}")
            print("üìù Supabase Dashboard'dan tablolarƒ± olu≈üturmanƒ±z gerekebilir")

        try:
            # Collected leads tablosu kontrol√º
            result = (
                self.client.table("collected_leads").select("id").limit(1).execute()
            )
            print("‚úÖ Collected leads tablosu mevcut")
        except Exception as e:
            print(f"‚ö†Ô∏è  Collected leads tablosu bulunamadƒ±: {e}")
            print(
                "üìù Supabase Dashboard'dan collected_leads tablosunu olu≈üturmanƒ±z gerekebilir"
            )

        try:
            # Pipeline tablosu kontrol√º
            result = self.client.table("pipeline").select("id").limit(1).execute()
            print("‚úÖ Pipeline tablosu mevcut")
        except Exception as e:
            print(f"‚ö†Ô∏è  Pipeline tablosu bulunamadƒ±: {e}")
            print(
                "üìù Supabase Dashboard'dan pipeline tablosunu olu≈üturmanƒ±z gerekebilir"
            )

    def execute_query(
        self,
        table_name: str,
        query_type: str = "select",
        filters: Dict = None,
        data: Dict = None,
        limit: int = None,
        order_by: str = None,
    ) -> List[Dict]:
        """Supabase sorgusu √ßalƒ±≈ütƒ±r"""
        try:
            table = self.client.table(table_name)

            if query_type == "select":
                query = table.select("*")

                # Filtreleri uygula
                if filters:
                    for key, value in filters.items():
                        if isinstance(value, (list, tuple)):
                            query = query.in_(key, value)
                        else:
                            query = query.eq(key, value)

                # Sƒ±ralama
                if order_by:
                    query = query.order(order_by)

                # Limit
                if limit:
                    query = query.limit(limit)

                result = query.execute()
                return result.data

            elif query_type == "insert":
                print(f"üîç INSERT i≈ülemi: {table_name} tablosuna veri ekleniyor...")
                print(f"üìù Eklenen veri: {data}")

                # Insert i≈üleminden sonra eklenen veriyi d√∂nd√ºr
                result = table.insert(data).execute()

                print(f"üìä Insert sonucu: {result}")
                print(f"üìä Result.data: {result.data}")
                print(
                    f"üìä Result.count: {result.count if hasattr(result, 'count') else 'N/A'}"
                )

                # Eƒüer data varsa, eklenen veriyi d√∂nd√ºr
                if result.data:
                    print(f"‚úÖ Veri ba≈üarƒ±yla eklendi: {result.data}")
                    return result.data
                else:
                    # Eƒüer data yoksa, bo≈ü liste d√∂nd√ºr
                    print(f"‚ö†Ô∏è Insert sonucu bo≈ü data d√∂nd√º")
                    return []

            elif query_type == "update":
                query = table.update(data)

                # Filtreleri uygula
                if filters:
                    for key, value in filters.items():
                        query = query.eq(key, value)

                result = query.execute()
                return result.data

            elif query_type == "delete":
                query = table.delete()

                # Filtreleri uygula
                if filters:
                    for key, value in filters.items():
                        query = query.eq(key, value)

                result = query.execute()
                return result.data

        except Exception as e:
            print(f"‚ùå Database sorgu hatasƒ±: {e}")
            return []

    def get_users(self, filters: Dict = None, limit: int = None) -> List[Dict]:
        """Kullanƒ±cƒ±larƒ± getir"""
        return self.execute_query("users", "select", filters, limit=limit)

    def get_user_by_id(self, user_id: str) -> Optional[Dict]:
        """ID ile kullanƒ±cƒ± getir"""
        result = self.execute_query("users", "select", {"id": user_id}, limit=1)
        return result[0] if result else None

    def get_user_by_email(self, email: str) -> Optional[Dict]:
        """Email ile kullanƒ±cƒ± getir"""
        result = self.execute_query("users", "select", {"email": email}, limit=1)
        return result[0] if result else None

    def get_user_by_username(self, username: str) -> Optional[Dict]:
        """Username ile kullanƒ±cƒ± getir"""
        result = self.execute_query("users", "select", {"username": username}, limit=1)
        return result[0] if result else None

    def create_user(self, user_data: Dict) -> Optional[Dict]:
        """Yeni kullanƒ±cƒ± olu≈ütur"""
        # Email kontrol√º
        if self.get_user_by_email(user_data["email"]):
            raise ValueError("Email already registered")

        result = self.execute_query("users", "insert", data=user_data)
        return result[0] if result else None

    def update_user(self, user_id: str, update_data: Dict) -> Optional[Dict]:
        """Kullanƒ±cƒ± g√ºncelle"""
        result = self.execute_query(
            "users", "update", {"id": user_id}, data=update_data
        )
        return result[0] if result else None

    def delete_user(self, user_id: str) -> bool:
        """Kullanƒ±cƒ± sil"""
        result = self.execute_query("users", "delete", {"id": user_id})
        return len(result) > 0

    def get_companies(self, filters: Dict = None, limit: int = None) -> List[Dict]:
        """≈ûirketleri getir"""
        return self.execute_query("companies", "select", filters, limit=limit)

    def create_company(self, company_data: Dict) -> Optional[Dict]:
        """Yeni ≈üirket olu≈ütur"""
        result = self.execute_query("companies", "insert", data=company_data)
        return result[0] if result else None

    def update_company(self, company_id: str, update_data: Dict) -> Optional[Dict]:
        """≈ûirket g√ºncelle"""
        result = self.execute_query(
            "companies", "update", {"id": company_id}, data=update_data
        )
        return result[0] if result else None

    def get_pipeline(self, filters: Dict = None, limit: int = None) -> List[Dict]:
        """Pipeline verilerini getir"""
        return self.execute_query("pipeline", "select", filters, limit=limit)

    def create_pipeline_entry(self, pipeline_data: Dict) -> Optional[Dict]:
        """Yeni pipeline giri≈üi olu≈ütur"""
        result = self.execute_query("pipeline", "insert", data=pipeline_data)
        return result[0] if result else None

    def update_pipeline_entry(
        self, pipeline_id: str, update_data: Dict
    ) -> Optional[Dict]:
        """Pipeline giri≈üi g√ºncelle"""
        result = self.execute_query(
            "pipeline", "update", {"id": pipeline_id}, data=update_data
        )
        return result[0] if result else None

    def get_chat_history(self, user_id: str = None, limit: int = None) -> List[Dict]:
        """Chat ge√ßmi≈üini getir"""
        filters = {"user_id": user_id} if user_id else None
        return self.execute_query("chat_history", "select", filters, limit=limit)

    def create_chat_entry(self, chat_data: Dict) -> Optional[Dict]:
        """Yeni chat giri≈üi olu≈ütur"""
        result = self.execute_query("chat_history", "insert", data=chat_data)
        return result[0] if result else None

    def get_weeks_data(self, week_number: int = None, limit: int = None) -> List[Dict]:
        """Haftalƒ±k verileri getir"""
        filters = {"week_number": week_number} if week_number else None
        return self.execute_query("weeks_data", "select", filters, limit=limit)

    def create_week_data(self, week_data: Dict) -> Optional[Dict]:
        """Yeni haftalƒ±k veri olu≈ütur"""
        result = self.execute_query("weeks_data", "insert", data=week_data)
        return result[0] if result else None

    def update_week_data(self, week_id: str, update_data: Dict) -> Optional[Dict]:
        """Haftalƒ±k veri g√ºncelle"""
        result = self.execute_query(
            "weeks_data", "update", {"id": week_id}, data=update_data
        )
        return result[0] if result else None

    def get_project_management(
        self, week_number: int = None, limit: int = None
    ) -> List[Dict]:
        """Proje y√∂netimi verilerini getir"""
        filters = {"week_number": week_number} if week_number else None
        return self.execute_query("project_management", "select", filters, limit=limit)

    def create_project_entry(self, project_data: Dict) -> Optional[Dict]:
        """Yeni proje giri≈üi olu≈ütur"""
        result = self.execute_query("project_management", "insert", data=project_data)
        return result[0] if result else None

    def update_project_entry(
        self, project_id: str, update_data: Dict
    ) -> Optional[Dict]:
        """Proje giri≈üi g√ºncelle"""
        result = self.execute_query(
            "project_management", "update", {"id": project_id}, data=update_data
        )
        return result[0] if result else None

    def get_collected_leads(
        self, filters: Dict = None, limit: int = None
    ) -> List[Dict]:
        """Toplanan lead'leri getir"""
        return self.execute_query("collected_leads", "select", filters, limit=limit)

    def create_lead(self, lead_data: Dict) -> Optional[Dict]:
        """Yeni lead olu≈ütur"""
        result = self.execute_query("collected_leads", "insert", data=lead_data)
        return result[0] if result else None

    def update_lead(self, lead_id: str, update_data: Dict) -> Optional[Dict]:
        """Lead g√ºncelle"""
        result = self.execute_query(
            "collected_leads", "update", {"id": lead_id}, data=update_data
        )
        return result[0] if result else None

    def search_companies(self, search_term: str, limit: int = 50) -> List[Dict]:
        """≈ûirket arama"""
        try:
            # Supabase'de full-text search i√ßin
            result = (
                self.client.table("companies")
                .select("*")
                .textSearch("name", search_term)
                .limit(limit)
                .execute()
            )
            return result.data
        except Exception as e:
            print(f"‚ùå Arama hatasƒ±: {e}")
            # Fallback: basit filtreleme
            return self.get_companies(limit=limit)

    def get_user_stats(self, user_id: str) -> Dict:
        """Kullanƒ±cƒ± istatistiklerini getir"""
        user = self.get_user_by_id(user_id)
        if not user:
            return {}

        # API √ßaƒürƒ± sayƒ±sƒ±
        api_calls = user.get("api_calls_count", 0)

        # Chat ge√ßmi≈üi sayƒ±sƒ±
        chat_count = len(self.get_chat_history(user_id))

        # Pipeline giri≈üi sayƒ±sƒ±
        pipeline_count = len(self.get_pipeline({"user_id": user_id}))

        return {
            "api_calls_count": api_calls,
            "chat_count": chat_count,
            "pipeline_count": pipeline_count,
            "last_login": user.get("last_login"),
            "created_at": user.get("created_at"),
        }

    def get_all_users(self) -> List[Dict]:
        """T√ºm kullanƒ±cƒ±larƒ± getir"""
        try:
            print(f"üîç Getting all users from users table...")
            result = self.client.table("users").select("*").execute()
            print(f"üîç Raw result: {result}")
            print(f"üîç Result data: {result.data}")
            print(f"üîç Result data type: {type(result.data)}")
            print(f"üîç Result data length: {len(result.data) if result.data else 0}")
            return result.data if result.data else []
        except Exception as e:
            print(f"‚ùå Get all users failed: {e}")
            import traceback

            traceback.print_exc()
            return []


    # Tender Methods
    def create_tender(self, tender_data: Dict) -> Optional[Dict]:
        """Yeni tender olu≈ütur"""
        # Language kolonunu ge√ßici olarak √ßƒ±kar (database'de yok)
        tender_data_copy = tender_data.copy()
        language = tender_data_copy.pop('language', 'en')  # Language'i sakla ama database'e g√∂nderme
        
        # Bo≈ü deadline field'larƒ±nƒ± None yap
        if 'deadline' in tender_data_copy and not tender_data_copy['deadline']:
            tender_data_copy['deadline'] = None
        tender_data_copy["created_at"] = datetime.now().isoformat()
        tender_data_copy["updated_at"] = datetime.now().isoformat()
        result = self.execute_query("tenders", "insert", data=tender_data_copy)
        
        # Sonucu d√∂nerken language'i geri ekle
        if result and len(result) > 0:
            result[0]['language'] = language
            return result[0]
        return None

    def get_tenders(self, filters: Dict = None, limit: int = None) -> List[Dict]:
        """Tender verilerini getir"""
        return self.execute_query("tenders", "select", filters, limit=limit)

    def get_tender(self, tender_id: str) -> Optional[Dict]:
        """Belirli bir tender'ƒ± getir"""
        result = self.execute_query("tenders", "select", {"id": tender_id})
        return result[0] if result else None

    def update_tender(self, tender_id: str, update_data: Dict) -> bool:
        """Tender g√ºncelle"""
        update_data["updated_at"] = datetime.now().isoformat()
        result = self.execute_query("tenders", "update", {"id": tender_id}, update_data)
        return bool(result)

    def delete_tender(self, tender_id: str) -> bool:
        """Tender sil"""
        result = self.execute_query("tenders", "delete", {"id": tender_id})
        return bool(result)


# Global database instance
db = SupabaseDatabaseManager()

if __name__ == "__main__":
    print("üîß Supabase Database Manager test ediliyor...")
    try:
        # Test baƒülantƒ±sƒ±
        users = db.get_users(limit=1)
        print(f"‚úÖ Baƒülantƒ± ba≈üarƒ±lƒ±! Kullanƒ±cƒ± sayƒ±sƒ±: {len(users)}")

        # Test veri ekleme
        test_user = {
            "email": "test@example.com",
            "username": "testuser",
            "full_name": "Test User",
            "is_active": True,
        }

        # Kullanƒ±cƒ± olu≈ütur (eƒüer yoksa)
        existing_user = db.get_user_by_email("test@example.com")
        if not existing_user:
            created_user = db.create_user(test_user)
            print(f"‚úÖ Test kullanƒ±cƒ±sƒ± olu≈üturuldu: {created_user['id']}")
        else:
            print(f"‚úÖ Test kullanƒ±cƒ±sƒ± zaten mevcut: {existing_user['id']}")

    except Exception as e:
        print(f"‚ùå Test hatasƒ±: {e}")
        print("üìù Supabase konfig√ºrasyonunu kontrol edin")
